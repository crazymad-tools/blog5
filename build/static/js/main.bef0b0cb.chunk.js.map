{"version":3,"sources":["history.ts","store/user.ts","store/index.ts","pages/components/Earth/index.tsx","pages/index/index.tsx","pages/auth/login/index.tsx","pages/auth/index.tsx","pages/auth/register/index.tsx","pages/components/TextEditor/index.tsx","pages/edit/index.tsx","pages/404.tsx","pages/App.tsx","serviceWorker.ts","index.tsx"],"names":["History","history","UserStore","action","bound","payload","axios","post","then","res","isLogin","status","push","observable","storeContext","React","createContext","userStore","useStores","useContext","Earth","props","className","href","target","src","IndexPage","id","observer","useState","username","setUsername","password","setPassword","login","placeholder","value","onChange","e","currentTarget","type","onKeyDown","keyCode","onClick","data-text","to","AuthPage","path","RegisterPage","email","setEmail","passwordRepeat","setPasswordRepeat","register","TextEditor","setValue","useEffect","defaultProps","Preview","lazy","EditPage","preview","setPreview","content","setContent","fallback","Page404","App","component","exact","LoginPage","nomatch","Boolean","window","location","hostname","match","ReactDOM","hydrate","url","createBrowserHistory","createHistory","pathname","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bef0b0cb.chunk.js","sourcesContent":["import { createBrowserHistory, createMemoryHistory } from \"history\";\r\nlet History: any = {\r\n  history: null\r\n};\r\n\r\nexport default History;\r\n\r\nexport function createHistory(url: string) {\r\n  let history = createBrowserHistory();\r\n  History.history = history;\r\n\r\n  return history;\r\n}\r\n\r\n","import { observable, action } from \"mobx\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport History from \"../history\";\r\n\r\nexport default class UserStore {\r\n  @observable\r\n  isLogin: boolean = false;\r\n    \r\n  @action.bound\r\n  login(payload: { username: string; password: string }) {\r\n    axios\r\n      .post(\"https://api.crazymad.top/api/auth/login/submit\", payload)\r\n      // .post(\"http://localhost:8089/api/auth/login/submit\", payload)\r\n      .then((res: AxiosResponse) => {\r\n        this.isLogin = true;\r\n        if (res.status === 201) {\r\n          History.history && History.history.push(\"/\");\r\n        }\r\n      });\r\n  }\r\n\r\n  @action.bound\r\n  register(payload: { username: string, email: string, password: string }) {\r\n    axios.post(\"https://api.crazymad.top/api/auth/register/submit\", payload).then((res: AxiosResponse) => {\r\n    // axios.post(\"http://localhost:8089/api/auth/register/submit\", payload).then((res: AxiosResponse) => {\r\n      if (res.status === 201) {\r\n        History.history && History.history.push(\"/auth/login\");\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import UserStore from \"./user\";\r\nimport React from \"react\";\r\n\r\nconst storeContext = React.createContext({\r\n  userStore: new UserStore()\r\n});\r\n\r\nconst useStores = () => React.useContext(storeContext);\r\n\r\nexport default useStores;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./index.scss\";\r\n\r\ninterface Props {}\r\n\r\nconst Earth: React.FC<Props> = props => {\r\n  return (\r\n    <a className=\"earth-link\" href=\"http://earth.crazymad.top\" target=\"blank\">\r\n      <div className=\"earth-globe\">\r\n        <img src=\"/earth.jpg\" />\r\n        <img src=\"/earth.jpg\" />\r\n        <div className=\"earth-shadow\" />\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Earth;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\nimport { RouteChildrenProps } from \"react-router-dom\";\r\nimport useStores from \"../../store\";\r\nimport Earth from \"../components/Earth\";\r\n\r\ninterface Props extends RouteChildrenProps {}\r\n\r\nconst IndexPage: React.FC<Props> = props => {\r\n  const { userStore } = useStores();\r\n\r\n  return (\r\n    <div id=\"indexPage\">\r\n      {/* index page\r\n      <button onClick={e => props.history.push(\"/auth/login\")}>Login</button>\r\n      <button onClick={e => props.history.push(\"/auth/register\")}>\r\n        Register\r\n      </button>\r\n      \r\n      {userStore.isLogin ? <span>has login</span> : <span>haven't login</span>} */}\r\n      <div className=\"earth-container\">\r\n        <Earth />\r\n      </div>\r\n      <div className=\"article-list-container\">\r\n        <div className=\"article-rocket\">\r\n          <span>HELLO WORLD</span>\r\n        </div>\r\n        <div className=\"article-rocket\" />\r\n        <div className=\"article-rocket\" />\r\n        <div className=\"article-rocket\" />\r\n        <div className=\"article-rocket\" />\r\n        <div className=\"article-rocket\" />\r\n        <div className=\"article-rocket\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { observable, action } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport useStores from \"../../../store\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Props {}\r\n\r\nconst LoginPage: React.FC<Props> = props => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const { userStore } = useStores();\r\n\r\n  function login() {\r\n    userStore.login({\r\n      username,\r\n      password\r\n    });\r\n  }\r\n\r\n  function keydown(e: any) {\r\n    if (e.keyCode === 13) {\r\n      login();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"loginPage\">\r\n      <div className=\"auth-form\">\r\n        <p>\r\n          <b>LOGIN</b>\r\n        </p>\r\n        <div className=\"auth-form-row\">\r\n          <input\r\n            placeholder=\"username\"\r\n            value={username}\r\n            onChange={e => setUsername(e.currentTarget.value)}\r\n          />\r\n        </div>\r\n        <div className=\"auth-form-row\">\r\n          <input\r\n            placeholder=\"password\"\r\n            value={password}\r\n            onChange={e => setPassword(e.currentTarget.value)}\r\n            type=\"password\"\r\n            onKeyDown={keydown}\r\n          />\r\n        </div>\r\n        <div className=\"auth-form-row\">\r\n          <button onClick={login} data-text=\"submit\" />\r\n        </div>\r\n        <div className=\"auth-form-row\">\r\n          <Link to=\"/auth/register\">to register</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(LoginPage);\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport './index.scss';\r\nimport LoginPage from './login';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst AuthPage: React.FC<Props> = props => {\r\n\r\n  return (\r\n    <div>\r\n      <Route path=\"/login\">\r\n        <LoginPage />\r\n      </Route>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AuthPage;","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useStores from \"../../../store\";\r\n\r\ninterface Props {}\r\n\r\nconst RegisterPage: React.FC<Props> = props => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordRepeat, setPasswordRepeat] = useState(\"\");\r\n  const { userStore } = useStores();\r\n\r\n  function register() {\r\n    if (\r\n      password === \"\" ||\r\n      passwordRepeat === \"\" ||\r\n      username === \"\" ||\r\n      email === \"\"\r\n    )\r\n      return;\r\n    if (passwordRepeat !== password) return;\r\n\r\n    userStore.register({\r\n      username,\r\n      email,\r\n      password\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div id=\"registerPage\">\r\n      <div className=\"auth-form\">\r\n        <p>\r\n          <b>REGISTER</b>\r\n        </p>\r\n        <div className=\"auth-form-row\">\r\n          <input\r\n            value={username}\r\n            onChange={e => setUsername(e.currentTarget.value)}\r\n            placeholder=\"username\"\r\n          />\r\n        </div>\r\n        <div className=\"auth-form-row\">\r\n          <input\r\n            value={email}\r\n            onChange={e => setEmail(e.currentTarget.value)}\r\n            placeholder=\"email\"\r\n          />\r\n        </div>\r\n        <div className=\"auth-form-row\">\r\n          <input\r\n            type=\"password\"\r\n            onChange={e => setPassword(e.currentTarget.value)}\r\n            value={password}\r\n            placeholder=\"password\"\r\n          />\r\n        </div>\r\n        <div className=\"auth-form-row\">\r\n          <input\r\n            type=\"password\"\r\n            onChange={e => setPasswordRepeat(e.currentTarget.value)}\r\n            value={passwordRepeat}\r\n            placeholder=\"repeat password\"\r\n          />\r\n        </div>\r\n        <div className=\"auth-form-row\">\r\n          <button onClick={register} data-text=\"submit\" />\r\n        </div>\r\n        <div className=\"auth-form-row\">\r\n          <Link to=\"/auth/login\">to login</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './index.scss';\r\n\r\ninterface Props {\r\n  value?: string;\r\n  onChange?: Function;\r\n  placeholder?: string;\r\n}\r\n\r\nconst TextEditor: React.FC<Props> = props => {\r\n  const [value, setValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    props.value && setValue(props.value);\r\n  }, [props.value]);\r\n\r\n  function change(e: any) {\r\n    setValue(e.currentTarget.value);\r\n    props.onChange && props.onChange(e);\r\n  }\r\n\r\n  return (\r\n    <div className=\"text-editor\">\r\n      <textarea onChange={change} placeholder={props.placeholder} />\r\n    </div>\r\n  )\r\n}\r\n\r\nTextEditor.defaultProps = {\r\n  placeholder: 'Please type somting in here'\r\n}\r\n\r\nexport default TextEditor;","import React, { useState, Suspense } from \"react\";\r\nimport \"./index.scss\";\r\nimport TextEditor from \"../components/TextEditor\";\r\n// import Preview from \"./Preview\";\r\n// import Preview from './Tmp';\r\n// import(\"./Preview\").then((template) => {\r\n//   Preview = template;\r\n// });\r\nconst Preview = React.lazy(() => import(\"./Preview\"));\r\n\r\ninterface Props {}\r\n\r\nconst EditPage: React.FC<Props> = props => {\r\n  const [preview, setPreview] = useState<boolean>(false);\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  return (\r\n    <div id=\"editPage\">\r\n      <div className=\"editor-header\">\r\n        <div className=\"title-input-box\">\r\n          <input placeholder=\"Please type article title in here\" />\r\n        </div>\r\n        <div className=\"tools\">\r\n          <span\r\n            className={`iconfont blog-icon-yulan ${preview ? \"active\" : \"\"}`}\r\n            onClick={e => setPreview(!preview)}\r\n          />\r\n          <span className=\"iconfont blog-icon-publish\" />\r\n          <span className=\"iconfont blog-icon-14\" />\r\n          <span className=\"iconfont blog-icon-table\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"editor-container\">\r\n        <div className=\"editor-input\">\r\n          <TextEditor\r\n            onChange={(e: any) => setContent(e.currentTarget.value)}\r\n          />\r\n        </div>\r\n        {preview && (\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <Preview content={content} />\r\n          </Suspense>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditPage;\r\n","import React from 'react';\r\n\r\ninterface Props { }\r\n\r\nconst Page404: React.FC<Props> = props => {\r\n\r\n  return (<div>\r\n    <h2>404</h2>\r\n  </div>)\r\n}\r\n\r\nexport default Page404;","import React, { useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch, RouteComponentProps } from 'react-router-dom';\r\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom';\r\nimport IndexPage from './index';\r\nimport AuthPage from './auth';\r\nimport LoginPage from './auth/login';\r\nimport RegisterPage from './auth/register';\r\nimport EditPage from './edit';\r\nimport Page404 from './404';\r\n\r\ninterface Props { }\r\n\r\nconst App: React.FC<Props> = props => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={IndexPage} exact />\r\n      <Route path=\"/auth\" component={AuthPage} />\r\n      <Route path=\"/auth/login\" component={LoginPage} />\r\n      <Route path=\"/auth/register\" component={RegisterPage} />\r\n      <Route path=\"/edit\" component={EditPage} />\r\n      <Route nomatch path=\"/404\" component={Page404} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './pages/App';\r\nimport { Router } from 'react-router';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport history, { createHistory } from './history';\r\nimport './global.scss';\r\n\r\nReactDOM.hydrate(\r\n  <Router history={createHistory(window.location.pathname)}>\r\n    <App />\r\n  </Router>\r\n  // <BrowserRouter>\r\n  //   <App />\r\n  // </BrowserRouter>\r\n  , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}